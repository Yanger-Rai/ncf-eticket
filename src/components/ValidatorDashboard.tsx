"use client";
import React, { useState, useMemo } from "react";
import { createClient } from "@/lib/supabase/client";
import ConfirmationDialog from "./ConfirmationDialog";
import { Ticket, User, TicketStatus } from "@/types/types";
import StatusBadge from "./StatusBadge";

interface ValidatorDashboardProps {
  user: User;
  tickets: Ticket[];
  onUpdateTicketStatus: (ticketId: string, status: TicketStatus) => void;
}

interface TicketListProps {
  ticketList: Ticket[];
  onRedeem: (ticket: Ticket) => void;
  redeemingTicketId: string | null;
}

export default function ValidatorDashboard({
  user,
  tickets,
  onUpdateTicketStatus,
}: ValidatorDashboardProps) {
  const supabase = createClient();
  const [searchTerm, setSearchTerm] = useState<string>("");
  const [showConfirm, setShowConfirm] = useState<Ticket | null>(null);
  const [isDownloading, setIsDownloading] = useState(false);
  const [redeemingTicketId, setRedeemingTicketId] = useState<string | null>(
    null
  );

  const filteredTickets = useMemo(() => {
    if (!searchTerm.trim()) return tickets;
    const lowerCaseSearch = searchTerm.toLowerCase();
    return tickets.filter(
      (t) =>
        t.id.toLowerCase().includes(lowerCaseSearch) ||
        t.purchaser_name.toLowerCase().includes(lowerCaseSearch) ||
        t.generated_by_name.toLowerCase().includes(lowerCaseSearch)
    );
  }, [searchTerm, tickets]);

  const handleRedeem = async (ticketId: string) => {
    setRedeemingTicketId(ticketId);
    const { error } = await supabase
      .from("tickets")
      .update({ status: "REDEEMED" })
      .eq("id", ticketId);

    if (!error) {
      onUpdateTicketStatus(ticketId, "REDEEMED");
    }

    setShowConfirm(null);
    setRedeemingTicketId(null);
  };

  const handleDownloadReport = async () => {
    setIsDownloading(true);
    try {
      const { data: allTickets, error } = await supabase
        .from("tickets")
        .select("*")
        .order("purchase_date", { ascending: false });

      if (error) {
        throw error;
      }

      const headers = [
        "ID",
        "Purchaser Name",
        "Purchase Date",
        "Status",
        "Generated By",
        "Ticket Type",
        "Price",
      ];
      const csvRows = [
        headers.join(","),
        ...(allTickets || []).map((t) =>
          [
            t.id,
            `"${t.purchaser_name}"`,
            `"${new Date(t.purchase_date).toLocaleString()}"`,
            t.status,
            `"${t.generated_by_name}"`,
            t.ticket_type,
            t.price,
          ].join(",")
        ),
      ];

      const csvString = csvRows.join("\n");
      const blob = new Blob([csvString], { type: "text/csv;charset=utf-8;" });
      const link = document.createElement("a");
      const url = URL.createObjectURL(blob);
      link.setAttribute("href", url);
      link.setAttribute("download", "naga_food_fest_report.csv");
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    } catch (error) {
      console.error("Error downloading report:", error);
      alert("Failed to download the report. Please try again.");
    } finally {
      setIsDownloading(false);
    }
  };

  const TicketList = ({
    ticketList,
    onRedeem,
    redeemingTicketId,
  }: TicketListProps) => (
    <div className="table-view max-h-96 overflow-y-auto">
      {ticketList.map((ticket) => (
        <div key={ticket.id} className="table-view-item flex-wrap">
          <div className="flex-1 min-w-[150px]">
            <p className="font-extrabold text-xl text-gray-900">{ticket.id}</p>
            <p className="text-gray-800 text-lg">{ticket.purchaser_name}</p>
          </div>
          <div className="flex items-center gap-3 mt-2 sm:mt-0">
            <StatusBadge status={ticket.status} />
            {ticket.status === "VALID" && (
              <button
                onClick={() => onRedeem(ticket)}
                disabled={redeemingTicketId === ticket.id}
                className="bg-green-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-green-700 disabled:bg-green-300 text-sm"
              >
                {redeemingTicketId === ticket.id ? "..." : "REDEEM"}
              </button>
            )}
          </div>
        </div>
      ))}
    </div>
  );

  return (
    <div className="py-4 space-y-6">
      <div className="px-4">
        <div className="relative">
          <input
            type="text"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full px-4 py-2 border-none rounded-lg text-lg bg-gray-200 pl-10"
            placeholder="Search..."
          />
          <div className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-5 w-5"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path
                fillRule="evenodd"
                d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z"
                clipRule="evenodd"
              />
            </svg>
          </div>
        </div>
        {user.role === "admin" && (
          <div className="mt-4 text-center">
            <button
              onClick={handleDownloadReport}
              disabled={isDownloading}
              className="ios-button-link text-base"
            >
              {isDownloading ? "Downloading..." : "Download Full Report"}
            </button>
          </div>
        )}
      </div>

      <div className="table-view-container">
        <h3 className="table-view-header">
          {searchTerm
            ? `Search Results (${filteredTickets.length})`
            : `Recent Tickets (${filteredTickets.length})`}
        </h3>
        <TicketList
          ticketList={filteredTickets}
          onRedeem={setShowConfirm}
          redeemingTicketId={redeemingTicketId}
        />
      </div>

      {showConfirm && (
        <ConfirmationDialog
          message={`Confirm redemption for ticket ${showConfirm.id}?`}
          onConfirm={() => handleRedeem(showConfirm.id)}
          onCancel={() => setShowConfirm(null)}
        />
      )}
    </div>
  );
}
